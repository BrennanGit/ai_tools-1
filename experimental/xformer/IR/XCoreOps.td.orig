// Copyright 2021 XMOS LIMITED. This Software is subject to the terms of the
// XMOS Public License: Version 1

//===----------------------------------------------------------------------===//
//
// This is the operation definition file for XCore dialect operations.
//
//===----------------------------------------------------------------------===//

include "mlir/IR/OpBase.td"
include "mlir/Interfaces/SideEffectInterfaces.td"
include "tensorflow/compiler/mlir/lite/quantization/quantization.td"

#ifndef TFL_OPS
def TFL_AF_None : StrEnumAttrCase<"NONE">;
def TFL_AF_Relu : StrEnumAttrCase<"RELU">;
def TFL_AF_Relu1 : StrEnumAttrCase<"RELU_N1_TO_1">;
def TFL_AF_Relu6 : StrEnumAttrCase<"RELU6">;

def TFL_AFAttr
    : StrEnumAttr<"ActivationFunctionType", "fused activation enum",
                  [TFL_AF_None, TFL_AF_Relu, TFL_AF_Relu1, TFL_AF_Relu6]>;

def TFL_PAD_Same : StrEnumAttrCase<"SAME">;
def TFL_PAD_Valid : StrEnumAttrCase<"VALID">;

def TFL_PaddingAttr
    : StrEnumAttr<"Padding", "padding enum", [TFL_PAD_Same, TFL_PAD_Valid]>;

def TFL_FCWO_Default : StrEnumAttrCase<"DEFAULT">;
def TFL_FCWO_Shuffled4x16i8 : StrEnumAttrCase<"SHUFFLED4x16INT8">;

def TFL_FullyConnectedOptionsWeightFormatAttr
    : StrEnumAttr<"FullyConnectedOptionsWeightsFormat",
                  "fully connected options weights format",
                  [TFL_FCWO_Default, TFL_FCWO_Shuffled4x16i8]>;
#endif

//===----------------------------------------------------------------------===//
// XCore dialect definitions
//===----------------------------------------------------------------------===//

#ifndef XCORE_DIALECT
#define XCORE_DIALECT

def XCoreDialect : Dialect {
  let name = "xc";

  let summary = "Types and operations for XCore dialect";
  let description = [{
    This dialect contains operations for XCore. This dialect will be used in
    conjunction with the TensorFlow dialects for converting & optimizing
    TF graphs to be deployed on XCore.
  }];

  let cppNamespace = "::mlir::xcore";
}

//===----------------------------------------------------------------------===//
// XCore op definitions
//===----------------------------------------------------------------------===//

// Base class for the operation in this dialect
class XC_Op<string mnemonic, list<OpTrait> traits = []>
    : Op<XCoreDialect, mnemonic, traits> {

  let extraClassDeclaration = [{ std::vector<uint8_t> buildCustomOptions(); }];
}

// Conv2D

def XC_Conv2D_ValidDirect : StrEnumAttrCase<"ValidDirect">;
def XC_Conv2D_ValidIndirect : StrEnumAttrCase<"ValidIndirect">;
def XC_Conv2D_PaddedIndirect : StrEnumAttrCase<"PaddedIndirect">;
def XC_DW_Conv2D_ValidDirect : StrEnumAttrCase<"DepthwiseValidDirect">;
def XC_DW_Conv2D_PaddedIndirect : StrEnumAttrCase<"DepthwisePaddedIndirect">;

def XC_Conv2D_TypeAttr : StrEnumAttr<"Conv2DType", "conv2d type enum", [
  XC_Conv2D_ValidDirect,
  XC_Conv2D_ValidIndirect,
  XC_Conv2D_PaddedIndirect,
  XC_DW_Conv2D_ValidDirect,
  XC_DW_Conv2D_PaddedIndirect,
]>;

def XC_Conv2DV2Op : XC_Op<"conv2d_v2", [NoSideEffect]> {
  let summary = "Conv2D V2 op";

  let description = [{Conv2D V2 op.}];

  let arguments = (ins
    TensorOf<[QI8]>:$input,

    I32Attr:$thread_count,
    I32ArrayAttr:$scratch_bytes,
    TensorOf<[I8]>:$weights,
    TensorOf<[I16]>:$biases,
    TensorOf<[I16]>:$multipliers,
    StrArrayAttr:$abstract_kernel_params,
    StrArrayAttr:$memcpy_fn_params,
    StrArrayAttr:$aggregate_fn_params,
    StrArrayAttr:$output_transform_fn_params,
    StrArrayAttr:$conv2d_kernel_type
  );

  let results = (outs TensorOf<[QI8]> : $output);
}

def XC_FullyConnectedOp : XC_Op<"fc", [NoSideEffect]> {
  let summary = "Fully connected op";

  let description = [{Fully connected op.}];

  let arguments = (ins
    TensorOf<[QI8]>:$input,
    // TODO: Hack to enable I8 for filter and I16 for bias
    // We might need a different op or match and replace in one pass
    TensorOf<[QI8, I8]>:$filter,
    TensorOf<[QI32, I16]>:$bias,

    TFL_AFAttr:$fused_activation_function,
    TFL_FullyConnectedOptionsWeightFormatAttr:$weights_format,
    BoolAttr:$keep_num_dims
  );

  let results = (outs TensorOf<[QI8]> : $output);
}

def XC_Lookup8Op : XC_Op<"lookup_8", [NoSideEffect]> {
  let summary = "Lookup table op";

  let description = [{Lookup table op.}];

  let arguments = (ins TensorOf<[QI8]> : $input, TensorOf<[I8]> : $lut);

  let results = (outs TensorOf<[QI8]> : $output);
}

def XC_PadOp : XC_Op<"pad", [NoSideEffect]> {
  let summary = "Pad op";

  let description = [{Pad op.}];

  let arguments = (ins
    TensorOf<[F32, I32, QI8]>:$input,
    TensorOf<[I32]>:$padding,

    I32Attr:$pad_value
    );

  let results = (outs TensorOf<[F32, I32, QI8]> : $output);
}

def XC_LoadConstantOp
    : XC_Op<"load_constant", [NoSideEffect, SameOperandsAndResultType]> {
  let summary = "Load constant op";

  let description = [{Load op.}];

  let arguments = (ins TensorOf<[I8, I16]> : $input);

  let results = (outs TensorOf<[I8, I16]> : $output);
}

def XC_LoadFlashOp
    : XC_Op<"load_flash", [NoSideEffect, SameOperandsAndResultType]> {
  let summary = "Load from flash op";

  let description = [{Load from flash op.}];

<<<<<<< HEAD
  let arguments = (ins
    TensorOf<[I8, I16]> : $input,
    I32Attr : $address,
    I32Attr : $bytes
    );
=======
  let arguments = (ins I32Attr : $address, I32Attr : $size);
>>>>>>> Rename attributes

  let results = (outs TensorOf<[I8, I16]> : $output);
}

#endif // XCORE_DIALECT
